// JS - мова програмування з динамічною типізацією, високорівнева, інтерпретована, мультипарадигмова, скриптова

// JS виконується браузером (движком)

// стандарт ECMAScript

// функція для виведення повідомлелння через модальне вікно на сторінці браузера
// alert("Hello world!");

// функція для виведення даних в консоль (в інструментах розробника) 
// console.log("Hi!");

// clo - скорочення для швидкого набору консоль лога з виведенням і стрінга object :>> і значення в змінній в консоль
// console.log('object :>> ', object);
// clg - скорочення для швидкого набору консоль лога з виведенням значення що міститься в змінній в консоль
// console.log(object);


// // - це однорядковий коментар
// /* */ - це багаторядковий коментар




        // Змінні


    // - let це змінна , значення якої можна змінювати (не строге)
    // - перше присвоєння називається ініціалізація
    // - назви змінних, функцій, тощо пишемо в lowerCamelCase (перша буква маленька, далі кожне наступне слово з великої, без пробілів)
    // - класи,тощо пишемо в UpperCamelCase (перша буква велика, далі кожне наступне слово з великої, без пробілів)
    // - константи пишемо в UPPER_SNAKE_CASE (всі будки великі, слова розділені нижнім підчеркуванням)
    // можна використ наст символи: a-z, A-Z, _, $, 0-9 - для першої літери неможна використ цифри

let userName = 'Anrietta';
console.log(userName);  // - виведе лише значення Anrietta
// console.log('userName :>> ', userName); - виведе назву змінної + значення
userName = 1;
console.log(userName);

    // - const це змінна , значення якої НЕ можна змінювати (строге)
    // для уникнення випадкової зміни значення, всі змінні які не мають змінюватись, рекомендується оголошувати як const
    // const рекомендовано використовувати коли ми самі розуміючи контекст коду та задачі знаємо що ми ці значення не будемо змінювати в своєму скрипті (для циклів, функцій, перевизначення значення в зміній тощо)


// const constValue = 10;
// constValue = 5;  // Не дозволяє змінювати значення
// console.log(userName);


    // - var це змінна , значення якої можна змінювати (Вони устарівші , їх не використовувати!)
var anotherValue = 'string';


        // Типи даних


// Динамічна типізація - це зміна типу даних саме в процесі виконання коду
// в інших мовах програмування (типізованих) - тип даних задається явно разом з оголошенням зміннної, тобто самій змінній присвоюється певний тип даних
// в JS (не типізований) - тип даних визначається не змінній а значенню змінної (за допомогою додаткових символів чи значень), і в майбутньому цей тип може бути змінений будь якою частиною коду
// в JS існує 8 типів даних, з них 7 перших примітивні типи даних, 1 останній це складний тип

// Типи даних JS:

// string: 'value', "value", `value` - рядок, текстові дані
    const stringVar1 = 'value';
    console.log(stringVar1);
    console.log(typeof(stringVar1));
    console.log('store "Aliexpress"'); //-якщо нам потрібно в стрінг вкласти текст огорнутий в лапки, то треба для того шматка тексту просто використати будь-які інші лапки крім тих які викорситовуються для коді
    console.log('store \'Aliexpress\''); //ще можна використати символ екранування \ 



// number: 
    // 4, 0, -10 - цілі числа; 
    // 20.5, -0.5 - з фіксованою крапкою; 
    // 0.4e25 = 0.4*10^25 = 0.00000000000000000000000004 - 0,4 * 10 піднесений в 25 степені, для запису довжелезних чисел (^-піднесення о степеня) - з плаваючою комою (експоненційна форма)
    // 21e16 = 21*10^16 = 210000000000000000  - з плаваючою комою (експоненційна форма)
    // NaN - not a number - помилка з типом даних Number
    // 5/0 - ділити на нуль неможна, як результат операції отримаєм Infinity або -Infinity
    // -0 -  малесеньке число дуууже сильно близьке до 0 з відємним значенням
    // +0 - малесеньке число дуууже сильно близьке до 0 з додатнім значенням
        const a = 10.002;
        console.log(a);
        console.log(typeof(a));

    // Number.MAX_SAFE_INTEGER - максимальне ціле число
    // Number.MAX_VALUE - максимальне числове значення




// bigint - велике ціле число. В кінці значення дописуєм n це ми позначили число як дуже велике,і JS дозволить вивести його в такому вигляді, тобто значення явно більше ніж дозволено Number.MAX_SAFE_INTEGER і ми про це повідомляємо
        const bigintValue = 1111111111111111111111111111111111111n;
        console.log(bigintValue);




// boolean: true (+), false (-) - логічні значення
    // назву змінної прийнято починати з is
        const isOdd = false;
        console.log(isOdd);
        console.log(typeof(isOdd));




// null: - окремий тип даних (хоча має тип даних object, це баг який не фіксять бо все поламаться), що означає що змінна пуста, сама змінна є, а вній нема значення
    // як порожня коробка з повітрям, нічого
    const nullValue = null;
    console.log(nullValue);
    console.log(typeof(nullValue));



// undefined - тип даних undefined, що означає що змінна взагалі немає задеклованого нічого, вона як оголошена але їй не присвоєно навіть "нічого/пустого знач"
    // як порожня коробка навіть без повітря, вакуум
    let value;
    console.log(value);
    console.log(typeof(value));



// symbol - використ рідко, восновному для технічних речей, генерує завідомо унікальні значення,але переглянути їх не дає
    const symbolValue = Symbol();  // згенерує щось схоже на це vd1fv2v1vdvsf2vsfv1vd5v7vs5svsv599vr - щось схоже на Хеш коміта
    console.log(symbolValue);



// object - грубо кажучи це контейнер що може вміщувати будь які примітивні типи даних
    const objValue = {};
    console.log(objValue);
    console.log(typeof(objValue));


// ########################################################################################################################


// Визначення типу даних

// typeof() - використовується для отримання інфи про тип даних
    // console.log('typeof 10 :>> ', typeof 10);
    // typeof 10 :>>  number  - результат виведений в консоль
    console.log('typeof 11n :>> ', typeof 11n);  //typeof 11n :>>  bigint
    console.log('typeof "11n" :>> ', typeof "11n");  //typeof "11n" :>>  string
    console.log('typeof true :>> ', typeof true); //typeof true :>>  boolean
    console.log('typeof "true" :>> ', typeof "true"); //typeof "true" :>>  string
    console.log('typeof null :>> ', typeof null); //typeof null :>>  object
    console.log('typeof undefined :>> ', typeof undefined); //typeof undef :>>  undefined
    console.log('typeof objValue :>> ', typeof objValue); //typeof objValue :>>  object


// ###############################################################################################################################


// Задачка: 
// задати дві змінні: 
// своє їм'я і кількість років і вивсести ці знач в консоль

const userName1 = 'Anrietta';
let userAge = 35;
    console.log('userName1 :>> ', userName1);
    console.log('userAge :>> ', userAge);




    

